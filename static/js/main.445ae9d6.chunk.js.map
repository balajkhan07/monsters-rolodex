{"version":3,"sources":["components/Card/card.component.jsx","components/CardList/card-list.component.jsx","components/SearchBox/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","monster","className","src","id","alt","name","email","CardList","monsters","map","index","key","SearchBox","placeholder","handleChange","type","onChange","App","state","searchText","fetch","then","res","json","setState","this","filteredMonsters","filter","toLowerCase","includes","style","marginBottom","marginTop","paddingTop","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2UAWeA,G,MARF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACZ,OAAO,yBAAKC,UAAU,QAClB,yBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,0BAA8DC,IAAKJ,EAAQK,OACnF,4BAAKL,EAAQK,MACb,2BAAIL,EAAQM,UCKLC,G,MARE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OAAO,yBAAKP,UAAU,aACjBO,EAASC,KAAI,SAACT,EAASU,GAAV,OACV,kBAAC,EAAD,CAAMC,IAAKD,EAAOV,QAASA,UCOxBY,G,MAXG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAC9B,OACI,2BACIb,UAAU,aACVc,KAAK,OACLF,YAAaA,EACbG,SAAUF,MC0BPG,G,kBA5Bb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXV,SAAU,GACVW,WAAY,IAJF,E,iFAQO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAb,GAAQ,OAAI,EAAKgB,SAAS,CAAEhB,SAAUA,S,+BAGtC,IAAD,SAC0BiB,KAAKP,MAA9BV,EADD,EACCA,SAAUW,EADX,EACWA,WACZO,EAAmBlB,EAASmB,QAAO,SAAA3B,GAAO,OAAIA,EAAQK,KAAKuB,cAAcC,SAASV,EAAWS,kBACnG,OACE,yBAAK3B,UAAU,OACb,wBAAI6B,MAAO,CAAEC,aAAc,OAAQC,UAAW,MAAOC,WAAY,UAAjE,oBACA,kBAAC,EAAD,CAAWnB,aAAc,SAACoB,GAAD,OAAO,EAAKV,SAAS,CAAEL,WAAYe,EAAEC,OAAOC,SAAUvB,YAAY,oBAC3F,kBAAC,EAAD,CAAUL,SAAUkB,S,GAvBVW,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.445ae9d6.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.scss'\r\n\r\nconst Card = ({ monster }) => {\r\n    return <div className=\"card\">\r\n        <img src={`https://robohash.org/${monster.id}?set=set3&size=180x180`} alt={monster.name}/>\r\n        <h2>{monster.name}</h2>\r\n        <p>{monster.email}</p>\r\n    </div>\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from '../Card/card.component'\r\nimport './card-list.styles.scss'\r\n\r\nconst CardList = ({ monsters }) => {\r\n    return <div className=\"card-list\">\r\n        {monsters.map((monster, index) => (\r\n            <Card key={index} monster={monster} />\r\n        ))}\r\n    </div>\r\n}\r\n\r\nexport default CardList","import React from 'react'\r\nimport './search-box.styles.scss'\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => {\r\n    return (\r\n        <input\r\n            className='search-box' \r\n            type=\"text\"\r\n            placeholder={placeholder}\r\n            onChange={handleChange}\r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchBox","import React, { Component } from 'react';\r\nimport CardList from './components/CardList/card-list.component'\r\nimport SearchBox from './components/SearchBox/search-box.component'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      monsters: [],\r\n      searchText: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(res => res.json())\r\n      .then(monsters => this.setState({ monsters: monsters }))\r\n  }\r\n\r\n  render() {\r\n    const { monsters, searchText } = this.state\r\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchText.toLowerCase()))\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 style={{ marginBottom: '30px', marginTop: '0px', paddingTop: '100px' }}>Monsters Rolodex</h1>\r\n        <SearchBox handleChange={(e) => this.setState({ searchText: e.target.value })} placeholder=\"Search Monsters\"/>\r\n        <CardList monsters={filteredMonsters} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}